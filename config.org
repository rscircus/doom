# -*- mode: org; eval: (add-hook 'after-save-hook (lambda () (org-html-export-to-html t)) nil t) -*-
#+TITLE: Doom Emacs Config

* Intro

This is all tecosaur's and Donald's fault:

#+begin_quote
Let us change our traditional attitude to the construction of programs: Instead of imagining that our main task is to instruct a computer what to do, let us concentrate rather on explaining to human beings what we want a computer to do. — Donald Knuth
#+end_quote

So, a bunch of things are happening here at the same time, even though people tell me to stop doing that (kind of multilearning).

- Learning Emacs
- Learning Org
- Learning Literate Programming
- Configuring Emacs

However, the first three things are necessary to do the last. So, here ware, multitasking.

* Basic Configuration

** DOOMs stuff

#+begin_src emacs-lisp
;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-

;; Place your private configuration here! Remember, you do not need to run 'doom
;; sync' after modifying this file!
#+end_src

** Personal Information

#+begin_src emacs-lisp
(setq user-full-name "Roland Siegbert"
      user-mail-address "roland@siegbert.info")
#+end_src


Phew, don't sweat it.


** Some defaults

*** Basic settings

#+begin_src emacs-lisp
(setq-default
window-combination-resize t ; take new window space from all windows
x-stretch-cursor t ; stretch cursor to glyph width
)

(setq undo-limit 80000000 ; 80Mb undo limit
      evil-want-fine-undo t ; evil is blobby, except when being fine and granular
      auto-save-default t
      truncate-string-ellipsis "…"
)

(display-time-mode 1) ; show time in mode-line
(unless (equal "Battery status not available" (battery))
  (display-battery-mode 1))
(global-subword-mode 1) ; iterate through CamelCase words
#+end_src

*** Windows

Ask what to see, after splitting:

#+begin_src emacs-lisp
(setq evil-vsplit-window-right t
      evil-split-window-below t
)

(defadvice! prompt-for-buffer (&rest _)
  :after '(evil-window-split evil-window-vsplit)
  (+ivy/switch-buffer)
)

(setq +ivy-buffer-preview t)
#+end_src

Rotate windows:
- =SPC wr= - Rotate windows
- =SPC w R= - Rotate Layout (=C-a SPC)

 Move around and swap windows:

 #+begin_src emacs-lisp
 (map! :map evil-window-map
      "SPC" #'rotate-layout
      ;; Navigation
      "<left>"     #'evil-window-left
      "<down>"     #'evil-window-down
      "<up>"       #'evil-window-up
      "<right>"    #'evil-window-right
      ;; Swapping windows
      "C-<left>"       #'+evil/window-move-left
      "C-<down>"       #'+evil/window-move-down
      "C-<up>"         #'+evil/window-move-up
      "C-<right>"      #'+evil/window-move-right)
#+end_src

** Doom configuration

*** Modules

Doom has a modular configuration base. A good starting point is the =init.el= file and hitting =K= or =gd= to inspect the modules itself. The defaults are good enough.


** Look and feel

#+begin_src emacs-lisp
(setq doom-font (font-spec :family "JetBrains Mono" :size 20)
      doom-big-font (font-spec :family "JetBrains Mono" :size 24)
      doom-variable-pitch-font (font-spec :family "Overpass" :size 14)
      doom-serif-font (font-spec :family "IBM Plex Mono" :size 20 :weight 'light)
)

(setq display-line-numbers-type t)

(setq doom-theme 'doom-acario-light)
#+end_src

** Mouse

#+begin_src emacs-lisp
(map! :n [mouse-8] #'better-jumper-jump-backward
      :n [mouse-9] #'better-jumper-jump-forward)
#+end_src
* Advanced Configuration
** Packages

* Previous =config.el=

#+begin_src emacs-lisp
(setq org-directory "~/org/")
;; Here are some additional functions/macros that could help you configure Doom:
;;
;; - `load!' for loading external *.el files relative to this one
;; - `use-package' for configuring packages
;; - `after!' for running code after a package has loaded
;; - `add-load-path!' for adding directories to the `load-path', relative to
;;   this file. Emacs searches the `load-path' when you load packages with
;;   `require' or `use-package'.
;; - `map!' for binding new keys
;;
;; To get information about any of these functions/macros, move the cursor over
;; the highlighted symbol at press 'K' (non-evil users must press 'C-c g k').
;; This will open documentation for it, including demos of how they are used.
;;
;; You can also try 'gd' (or 'C-c g d') to jump to their definition and see how
;; they are implemented.
#+end_src

* Resources:

- https://tecosaur.github.io/emacs-config/config.html
- https://raw.githubusercontent.com/tecosaur/emacs-config/master/config.org
