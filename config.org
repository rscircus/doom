# -*- mode: org; eval: (add-hook 'after-save-hook (lambda () (org-html-export-to-html t)) nil t) -*-
#+TITLE: Doom Emacs Config

* Intro

This is all tecosaur's and Donald's fault:

#+begin_quote
Let us change our traditional attitude to the construction of programs: Instead of imagining that our main task is to instruct a computer what to do, let us concentrate rather on explaining to human beings what we want a computer to do. ‚Äî Donald Knuth
#+end_quote

So, a bunch of things are happening here at the same time, even though people tell me to stop doing that (kind of multilearning).

- Learning Emacs
- Learning Org
- Learning Literate Programming
- Configuring Emacs

However, the first three things are necessary to do the last. So, here ware, multitasking.

* TODO Configuration
** DONE Copy and paste images into org files
** TODO Understand org-noter and its integration into doom
:LOGBOOK:
CLOCK: [2020-11-01 So 09:31]
:END:
*** On org-noter itself

Org noter can be visited here: https://github.com/weirdNox/org-noter


** TODO Understand deft
** TODO Understand org-roam and its integration itno doom
** TODO Connect org-roam with some kind of citation system like bibtex?
** TODO Become more fluent with org itself

* Basic Configuration

** DOOMs stuff

#+begin_src emacs-lisp
;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-

;; Place your private configuration here! Remember, you do not need to run 'doom
;; sync' after modifying this file!
#+end_src

** Personal Information

#+begin_src emacs-lisp
(setq user-full-name "Roland Siegbert"
      user-mail-address "roland@siegbert.info")
#+end_src

Phew, don't sweat it.

** Some defaults

*** Basic settings

#+begin_src emacs-lisp
(setq-default
 window-combination-resize t ; take new window space from all windows
 x-stretch-cursor t ; stretch cursor to glyph width
 )

(setq undo-limit 80000000 ; 80Mb undo limit
      evil-want-fine-undo t ; evil is blobby, except when being fine and granular
      auto-save-default t
      inhibit-compacting-font-caches t ; keep glyphs in memory
      truncate-string-ellipsis "‚Ä¶"
      )

(display-time-mode 1) ; show time in mode-line
(delete-selection-mode 1) ; replace selection when inserting text
(global-subword-mode 1) ; iterate through CamelCase words
                                        ;(setq line-spacing 0.3) ; huge line spacing
(unless (equal "Battery status not available" (battery))
  (display-battery-mode 1))
#+end_src

*** Full screen

Focus!

#+BEGIN_SRC emacs-lisp
(if (eq initial-window-system 'x)                 ; if started by emacs command or desktop file
    (toggle-frame-maximized)
  (toggle-frame-fullscreen))
#+END_SRC

*** Windows

Ask what to see, after splitting:

#+begin_src emacs-lisp
(setq evil-vsplit-window-right t
      evil-split-window-below t
      )
(defadvice! prompt-for-buffer (&rest _)
  :after '(evil-window-split evil-window-vsplit)
  (+ivy/switch-buffer)
  )
(setq +ivy-buffer-preview t)
#+end_src

Rotate windows:
- =SPC w r= - Rotate windows
- =SPC w R= - Rotate Layout (=C-a SPC)

 Move around and swap windows:

 #+begin_src emacs-lisp
 (map! :map evil-window-map
      "SPC" #'rotate-layout
      ;; Navigation
      "<left>"     #'evil-window-left
      "<down>"     #'evil-window-down
      "<up>"       #'evil-window-up
      "<right>"    #'evil-window-right
      ;; Swapping windows
      "C-<left>"       #'+evil/window-move-left
      "C-<down>"       #'+evil/window-move-down
      "C-<up>"         #'+evil/window-move-up
      "C-<right>"      #'+evil/window-move-right)
#+end_src

#+BEGIN_SRC emacs-lisp
(setq frame-title-format
      '(""
        (:eval
         (if (s-contains-p org-roam-directory (or buffer-file-name ""))
             (replace-regexp-in-string ".*/[0-9]*-?" "ü¢î " buffer-file-name)
           "%b"))
        (:eval
         (let ((project-name (projectile-project-name)))
           (unless (string= "-" project-name)
             (format (if (buffer-modified-p)  " ‚óâ %s" " ‚ÄÜ‚óè‚ÄÜ %s") project-name))))))
#+END_SRC

*** Modeline

Usually everything is =UTF-8= these days. So, only show if it is not!

#+begin_src emacs-lisp
(defun doom-modeline-conditional-buffer-encoding ()
  (setq-local doom-modeline-buffer-encoding
              (unless (or (eq buffer-file-coding-system 'utf-8-unix)
                          (eq buffer-file-coding-system 'utf-8)))))
(add-hook 'after-change-major-mode-hook #'doom-modeline-conditional-buffer-encoding)
#+end_src

** Doom configuration

*** Modules

Doom has a modular configuration base. A good starting point is the =init.el= file and hitting =K= or =gd= to inspect the modules itself. The defaults are good enough.


** Look and feel

*** Fonts

Proportional fonts

#+BEGIN_SRC emacs-lisp
                                        ; TODO: Don't get this yet
                                        ;(defun my-buffer-face-mode-variable ()
                                        ;  "Set font to a variable width (proportional) fonts in current buffer"
                                        ;  (interactive)
                                        ;  (setq buffer-face-mode-face '(:family "JetBrains Mono" :height 100 ))
                                        ;  (buffer-face-mode))
                                        ;(add-hook 'org-mode-hook 'my-buffer-face-mode-variable)
#+END_SRC

Other font settings

#+begin_src emacs-lisp
(setq doom-font (font-spec :family "JetBrains Mono" :size 20)
      doom-big-font (font-spec :family "JetBrains Mono" :size 24)
      doom-variable-pitch-font (font-spec :family "Overpass" :size 14)
      doom-serif-font (font-spec :family "IBM Plex Mono" :size 20 :weight 'light)
      )

(setq display-line-numbers-type t)
#+end_src

*** Theme

#+BEGIN_SRC emacs-lisp
;;(setq doom-theme 'doom-acario-light)
;;(load-theme 'leuven t)
(load-theme 'acme t)

(setq acme-theme-black-fg t)

;; Fontify the whole line for headings (with a background color). Has to go above loven, but below acme.
(setq org-fontify-whole-heading-line t)
#+end_src

Proportional fonts

** Mouse

#+begin_src emacs-lisp
(map! :n [mouse-8] #'better-jumper-jump-backward
      :n [mouse-9] #'better-jumper-jump-forward)
#+end_src

** Org

The basic org configuration

#+begin_src emacs-lisp
(setq
 org_notes (concat (getenv "HOME") "/src/org/")
 zot_bib (concat (getenv "HOME") "/src/zotero/zotLib.bib")
 org-directory org_notes
 deft-directory org_notes
 org-roam-directory org_notes
 )
                                        ;(setq org-directory "~/src/org/")
;; Here are some additional functions/macros that could help you configure Doom:
;;
;; - `load!' for loading external *.el files relative to this one
;; - `use-package' for configuring packages
;; - `after!' for running code after a package has loaded
;; - `add-load-path!' for adding directories to the `load-path', relative to
;;   this file. Emacs searches the `load-path' when you load packages with
;;   `require' or `use-package'.
;; - `map!' for binding new keys
;;
;; To get information about any of these functions/macros, move the cursor over
;; the highlighted symbol at press 'K' (non-evil users must press 'C-c g k').
;; This will open documentation for it, including demos of how they are used.
;;
;; You can also try 'gd' (or 'C-c g d') to jump to their definition and see how
;; they are implemented.
#+end_src

*** Save images from clipboard (org-download)

I'll have to redo this another day. My understanding of emacs is not there, yet.

The integration via

#+begin_src emacs-lisp :tangle no
(org
 +download) ;init.el
#+end_src

is pretty nice. :-)

*** Org Buffer

#+begin_src emacs-lisp
(evil-define-command evil-buffer-org-new (count file)
  "Creates a new org buffer replacing the current window, optionally editing a certain FILE"
  :repeat nil
  (interactive "P<f>")
  (if file
      (evil-edit file)
    (let ((buffer (generate-new-buffer "*new org*")))
      (set-window-buffer nil buffer)
      (with-current-buffer buffer
        (org-mode)))))
(map! :leader
      (:prefix "b"
       :desc "New empty ORG buffer" "o" #'evil-buffer-org-new))
#+end_src

*** Org Journal

Use this as a daily driver.

#+BEGIN_SRC emacs-lisp
;; org-journal the DOOM way
(use-package org-journal
  :init
  (setq org-journal-date-prefix "#+TITLE: "
        org-journal-file-format "%Y-%m-%d.org"
        org-journal-date-format "%A, %d %B %Y")
  :config
  (setq org-journal-find-file #'find-file-other-window )
  (map! :map org-journal-mode-map
        "C-c n s" #'evil-save-modified-and-close )
  )

(setq org-journal-enable-agenda-integration t)
#+END_SRC


*** Org Noter

#+begin_src emacs-lisp
(use-package org-noter
  :after (:any org pdf-view)
  :config
  (setq
   ;; The WM can handle splits
   org-noter-notes-window-location 'other-frame
   ;; Please stop opening frames
   org-noter-always-create-frame nil
   ;; I want to see the whole file
   org-noter-hide-other nil
   ;; Everything is relative to the main notes file
   org-noter-notes-search-path (list org_notes)
   )
  )
(setq org-noter-separate-notes-from-heading t)
#+end_src

*** Org Roam

Meanwhile doom integrates =roam= quite nicely. Access it by typing =SPC

#+begin_src emacs-lisp
(after! org-roam
  (setq org-roam-ref-capture-templates
        '(("r" "ref" plain (function org-roam-capture--get-point)
           "%?"
           :file-name "websites/${slug}"
           :head "#+TITLE: ${title}
,#+ROAM_KEY: ${ref}
- source :: ${ref}"
           :unnarrowed t))))
                                        ; TODO: This capture template for websites requires org-roam protocol
#+end_src

** Deft

Quickly search through org.

#+BEGIN_SRC emacs-lisp
(use-package deft
  :after org
                                        ;:bind
                                        ;("C-c n d" . deft)
  :custom
  (deft-recursive t)
  (deft-use-filter-string-for-filename t)
  (deft-default-extension "org"))
#+END_SRC

* Package loading (=packages.el=) :ATTACH:
:PROPERTIES:
:header-args:emacs-lisp: :tangle "packages.el"
:END:
The following section fills =packages.el=. And this file shouldn't be byte compiled.

#+begin_src emacs-lisp
;; -*- no-byte-compile: t; -*-
#+end_src

** Packages

#+begin_src emacs-lisp
;; ui
(package! beacon) ; global minor mode for a blinking highliter to find where the cursor is.
(package! rotate :pin "091b5ac4fc...") ; window mgmt
(package! xkcd :pin "66e928706f...")
(package! wttrin :recipe (:local-repo "lisp" :no-byte-compile t))
(package! spray :pin "00638bc916...") ; flash words on screen
(package! theme-magic :pin "844c4311bd...") ; terminal theme support
(package! ess-view :pin "d4e5a340b7...") ; data frames all the way down
(package! info-colors :pin "47ee73cc19...") ; makes info pages better

;; sanity
; TODO: not ready yet: (package! origami) ; fold stuff away

;; org
(package! org-roam-bibtex)
(package! org-noter)

                                        ;(package! calctex :recipe (:host github :repo "johnbcoughlin/calctex"
                                        ;                           :files ("*.el" "calctex/*.el" "calctex-contrib/*.el" "org-calctex/*.el"))
                                        ; :pin "7fa2673c64...")
(package! org-super-agenda :pin "3264255989...")
(package! org-pretty-table-mode
  :recipe (:host github :repo "Fuco1/org-pretty-table") :pin "88380f865a...")
(package! org-fragtog :pin "92119e3ae7...")
(package! org-pretty-tags :pin "40fd72f3e7...")
(package! org-ref :pin "f582e9c53e...") ; citations
(package! org-graph-view :recipe (:host github :repo "alphapapa/org-graph-view") :pin "13314338d7...")
(package! org-chef :pin "5b461ed7d458cdcbff0af5013fbdbe88cbfb13a4") ; url -> orgified version of it
(package! company-org-roam :recipe (:host github :repo "org-roam/company-org-roam"))
(package! graphviz-dot-mode :pin "3642a0a5f41a80c8ecef7c6143d514200b80e194")
(package! ox-gfm :pin "99f93011b0...") ; markdown export with GitHub support

;; themes
(package! leuven-theme) ;; great theme for org
(package! acme-theme) ;; even greater theme
#+end_src

#+RESULTS:
| graphviz-dot-mode | :modules | ((:private . config) (:private . modules)) | :pin | 3642a0a5f41a80c8ecef7c6143d514200b80e194 |

* Now let's customize the packages above in =config.el=
** Company
It's nice to have completions almost all the time, in my opinion. Key strokes
are just waiting to be saved!
#+begin_src emacs-lisp
(after! company
  (setq company-idle-delay 0.5
        company-minimum-prefix-length 2)
  (setq company-show-numbers t)
  (add-hook 'evil-normal-state-entry-hook #'company-abort)) ;; make aborting less annoying.
#+end_src
Now, the improvements from ~precedent~ are mostly from remembering history, so
let's improve that memory.
#+begin_src emacs-lisp
(setq-default history-length 1000)
(setq-default prescient-history-length 1000)
#+end_src

** Plain Text
~Ispell~ is nice, let's have it in ~text~, ~markdown~, and ~GFM~.
#+begin_src emacs-lisp
(set-company-backend!
  '(text-mode
    markdown-mode
    gfm-mode)
  '(:seperate
    company-ispell
    company-files
    company-yasnippet))
#+end_src

** Info colors
#+begin_src emacs-lisp
(use-package! info-colors
  :commands (info-colors-fontify-node))

(add-hook 'Info-selection-hook 'info-colors-fontify-node)

(add-hook 'Info-mode-hook #'mixed-pitch-mode)
#+end_src

** Modifying doom

#+begin_src emacs-lisp
(setq which-key-idle-delay 0.5) ;; I need the help, I really do
(setq which-key-allow-multiple-replacements t)
(after! which-key
  (pushnew!
   which-key-replacement-alist
   '(("" . "\\`+?evil[-:]?\\(?:a-\\)?\\(.*\\)") . (nil . "‚óÇ\\1"))
   '(("\\`g s" . "\\`evilem--?motion-\\(.*\\)") . (nil . "‚óÉ\\1"))
   ))
#+end_src

Let's connect org-brain with org-noter as described here: https://plasisent.org/2019/lecture-notes-with-emacs-org-brain-noter/

Needed to use org-brain-visualize with org-noter notes:

#+begin_src emacs-lisp
(add-hook 'org-noter-insert-heading-hook #'org-id-get-create)

;; open noter session from visualized org-brain
(defun org-brain-open-org-noter (entry)
    "Open `org-noter' on the ENTRY.
If run interactively, get ENTRY from context."
    (interactive (list (org-brain-entry-at-pt)))
    (org-with-point-at (org-brain-entry-marker entry)
      (org-noter)))
#+end_src

* Resources:

- https://tecosaur.github.io/emacs-config/config.html
- https://raw.githubusercontent.com/tecosaur/emacs-config/master/config.org
