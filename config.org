# -*- mode: org; eval: (add-hook 'after-save-hook (lambda () (org-html-export-to-html t)) nil t) -*-
#+TITLE: Doom Emacs Config

* Intro

This is all tecosaur's and Donald's fault:

#+begin_quote
Let us change our traditional attitude to the construction of programs: Instead of imagining that our main task is to instruct a computer what to do, let us concentrate rather on explaining to human beings what we want a computer to do. ‚Äî Donald Knuth
#+end_quote

So, a bunch of things are happening here at the same time, even though people tell me to stop doing that (kind of multilearning).

- Learning Emacs
- Learning Org
- Learning Literate Programming
- Configuring Emacs

However, the first three things are necessary to do the last. So, here ware, multitasking.

* TODO Configuration
** DONE Copy and paste images into org files
** TODO Understand org-noter and its integration into doom
:LOGBOOK:
CLOCK: [2020-11-01 So 09:31]--[2020-11-01 So 10:31] =>  1:00
:END:
*** On org-noter itself

Org noter can be visited here: https://github.com/weirdNox/org-noter


** TODO Understand deft
** TODO Understand org-roam and its integration itno doom
** TODO Connect org-roam with some kind of citation system like bibtex?
** TODO Become more fluent with org itself
** TODO Actually org-roam-dailies can kill the journal. Migrate?

Inspired by https://github.com/OwenPriceSkelly/emacs-config/blob/5fcbaaa1183873f15af8050a49a01180d8677019/config.org
** TODO Teco again...
:LOGBOOK:
CLOCK: [2020-11-08 So 20:59]
:END:

* BASIC CONFIG

** DOOMs stuff

#+begin_src emacs-lisp
;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-

;; Place your private configuration here! Remember, you do not need to run 'doom
;; sync' after modifying this file!
#+end_src

** Personal Information

#+begin_src emacs-lisp
(setq user-full-name "Roland Siegbert"
      user-mail-address "roland@siegbert.info")
#+end_src

Phew, don't sweat it.

** Some defaults

*** Basic settings

#+begin_src emacs-lisp
(setq-default
 delete-by-moving-to-trash t
 window-combination-resize t ; take new window space from all windows
 x-stretch-cursor t ; stretch cursor to glyph width
 fill-column 120 ; keep your space
 delete-trailing-lines t ; get ride of white noise
 )

(setq undo-limit 80000000 ; 80Mb undo limit
      evil-want-fine-undo t ; evil is blobby, except when being fine and granular
      auto-save-default t
      inhibit-compacting-font-caches t ; keep glyphs in memory
      truncate-string-ellipsis "‚Ä¶"
      display-line-numbers-type 'relative ; switch with spc t l
      )
(display-time-mode 1) ; show time in mode-line
(delete-selection-mode 1) ; replace selection when inserting text
(global-subword-mode 1) ; iterate through CamelCase words
(show-paren-mode 1)

                                        ;(setq line-spacing 0.3) ; huge line spacing
(unless (equal "Battery status not available" (battery))
  (display-battery-mode 1))

;; disable risky local variables warning
(advice-add 'risky-local-variable-p :override #'ignore)
#+end_src

*** Full screen

Focus!

#+BEGIN_SRC emacs-lisp
(if (eq initial-window-system 'x)                 ; if started by emacs command or desktop file
    (toggle-frame-maximized)
  (toggle-frame-fullscreen))
#+END_SRC

*** Windows

Ask what to see, after splitting:

#+begin_src emacs-lisp
(setq evil-vsplit-window-right t
      evil-split-window-below t
      )
(defadvice! prompt-for-buffer (&rest _)
  :after '(evil-window-split evil-window-vsplit)
  (+ivy/switch-buffer)
  )
(setq +ivy-buffer-preview t)
#+end_src

Rotate windows:
- =SPC w r= - Rotate windows
- =SPC w R= - Rotate Layout (=C-a SPC)

 Move around and swap windows:

 #+begin_src emacs-lisp
 (map! :map evil-window-map
      "SPC" #'rotate-layout
      ;; Navigation
      "<left>"     #'evil-window-left
      "<down>"     #'evil-window-down
      "<up>"       #'evil-window-up
      "<right>"    #'evil-window-right
      ;; Swapping windows
      "C-<left>"       #'+evil/window-move-left
      "C-<down>"       #'+evil/window-move-down
      "C-<up>"         #'+evil/window-move-up
      "C-<right>"      #'+evil/window-move-right)
#+end_src

#+BEGIN_SRC emacs-lisp
(setq frame-title-format
      '(""
        (:eval
         (if (s-contains-p org-roam-directory (or buffer-file-name ""))
             (replace-regexp-in-string ".*/[0-9]*-?" "ü¢î " buffer-file-name)
           "%b"))
        (:eval
         (let ((project-name (projectile-project-name)))
           (unless (string= "-" project-name)
             (format (if (buffer-modified-p)  " ‚óâ %s" " ‚ÄÜ‚óè‚ÄÜ %s") project-name))))))
#+END_SRC

*** Modeline

Usually everything is =UTF-8= these days. So, only show if it is not!

#+begin_src emacs-lisp
(defun doom-modeline-conditional-buffer-encoding ()
  (setq-local doom-modeline-buffer-encoding
              (unless (or (eq buffer-file-coding-system 'utf-8-unix)
                          (eq buffer-file-coding-system 'utf-8)))))
(add-hook 'after-change-major-mode-hook #'doom-modeline-conditional-buffer-encoding)
                                        ;
                                        ;                                        ; and the file name
                                        ;(defadvice! doom-modeline--reformat-roam (orig-fun)
                                        ;  :around #'doom-modeline-buffer-file-name
                                        ;  (message "Reformat?")
                                        ;  (message (buffer-file-name))
                                        ;  (if (s-contains-p org-roam-directory (or buffer-file-name ""))
                                        ;      (replace-regexp-in-string
                                        ;       "\\(?:^\\|.*/\\)\\([0-9]\\{4\\}\\)\\([0-9]\\{2\\}\\)\\([0-9]\\{2\\}\\)[0-9]*-"
                                        ;       "ü¢î(\\1-\\2-\\3) "
                                        ;       (funcall orig-fun))
                                        ;    (funcall orig-fun)))
#+end_src
*** Dired

#+BEGIN_SRC emacs-lisp
(setq ranger-ovverride-dired-mode t)
                                        ;(after! dired
                                        ;  ;; Rust version ls
                                        ;  (when-let (exa (executable-find "exa"))
                                        ;    (setq insert-directory-program "/home/linuxbrew/.linuxbrew/bin/exa")
                                        ;    (setq dired-listing-switches (string-join (list "-ahl" "--group-directories-first") " ")))
                                        ;  )
#+END_SRC

** Doom configuration

*** Doom evil-snipe

#+BEGIN_SRC emacs-lisp
(use-package! evil-snipe
  :init
  (setq evil-snipe-scope                     'whole-visible
        evil-snipe-spillover-scope           'whole-buffer
        evil-snipe-repeat-scope              'buffer
        evil-snipe-tab-increment             t
        evil-snipe-repeat-keys               t
        evil-snipe-override-evil-repeat-keys t)
  :config
  ;; when f/t/s searching, interpret open/close square brackets to be any
  ;; open/close delimiters, respectively
  (push '(?\[ "[[{(]") evil-snipe-aliases)
  (push '(?\] "[]})]") evil-snipe-aliases)
  ;; "C-;" pre-fills avy-goto-char-2 with most recent snipe
  (map! :map (evil-snipe-parent-transient-map evil-snipe-local-mode-map)
        "C-;" (cmd! (if evil-snipe--last
                        (let ((most-recent-chars (nth 1 evil-snipe--last)))
                          (if (eq 2 (length most-recent-chars))
                              (apply #'avy-goto-char-2 most-recent-chars)
                            (call-interactively #'avy-goto-char-2))))))
  ;; (setq! avy-all-windows t)
  (evil-snipe-override-mode +1))
#+END_SRC
*** DOOM dashboard

#+BEGIN_SRC emacs-lisp
                                        ;(setq! +doom-dashboard-menu-sections
                                        ;       '(("Reload last session"
                                        ;          :icon (all-the-icons-octicon "history" :face 'doom-dashboard-menu-title)
                                        ;          :when (cond ((require 'persp-mode nil t)
                                        ;                       (file-exists-p (expand-file-name persp-auto-save-fname persp-save-dir)))
                                        ;                      ((require 'desktop nil t)
                                        ;                       (file-exists-p (desktop-full-file-name))))
                                        ;          :face (:inherit (doom-dashboard-menu-title bold))
                                        ;          :action doom/quickload-session)
                                        ;         ("Open today's note"
                                        ;          :icon (all-the-icons-octicon "book" :face 'doom-dashboard-menu-title)
                                        ;          :action org-roam-dailies-today)
                                        ;         ("Recently opened files"
                                        ;          :icon (all-the-icons-octicon "file-text" :face 'doom-dashboard-menu-title)
                                        ;          :action recentf-open-files)
                                        ;         ("Open project"
                                        ;          :icon (all-the-icons-octicon "repo" :face 'doom-dashboard-menu-title)
                                        ;          :action projectile-switch-project)
                                        ;         ;; ("Jump to bookmark"
                                        ;         ;;  :icon (all-the-icons-octicon "bookmark" :face 'doom-dashboard-menu-title)
                                        ;         ;;  :action bookmark-jump)
                                        ;         ("Open private configuration"
                                        ;          :icon (all-the-icons-octicon "tools" :face 'doom-dashboard-menu-title)
                                        ;          :when (file-directory-p doom-private-dir)
                                        ;          :action doom/open-private-config))
                                        ;       )
#+END_SRC

*** Modules

Doom has a modular configuration base. A good starting point is the =init.el= file and hitting =K= or =gd= to inspect the modules itself. The defaults are good enough.

** Look and feel

*** Fonts

Other font settings

#+begin_src emacs-lisp
(setq doom-font (font-spec :family "JetBrains Mono" :size 24)
      doom-big-font (font-spec :family "JetBrains Mono" :size 24)
      doom-variable-pitch-font (font-spec :family "Overpass" :size 24)
      doom-serif-font (font-spec :family "IBM Plex Mono" :size 28 :weight 'light)
      )
#+end_src

*** Theme

#+BEGIN_SRC emacs-lisp
(use-package! doom-themes
  :config
  (setq doom-themes-enable-bold t      ; if nil, bold is universally disabled
        doom-themes-enable-italic t)   ; if nil, italics is universally disabled
  (load-theme 'leuven t)
  ;; (load-theme 'doom-acario-light t)
  ;; (load-theme 'doom-solarized-light t)
  ;; (load-theme 'doom-one-light t)

  ;; Enable flashing mode-line on errors
  (doom-themes-visual-bell-config)

  ;; Corrects (and improves) org-mode's native fontification.
  (doom-themes-org-config))
;;(setq doom-theme 'doom-one-light)
;;(load-theme 'leuven t)
                                        ;(load-theme 'acme t)

                                        ;(setq acme-theme-black-fg t)

;; Fontify the whole line for headings (with a background color). Has to go above loven, but below acme.
                                        ;(setq org-fontify-whole-heading-line t)
#+end_src

** Mouse

#+begin_src emacs-lisp
(map! :n [mouse-8] #'better-jumper-jump-backward
      :n [mouse-9] #'better-jumper-jump-forward)
#+end_src

** Org

The basic org configuration

#+begin_src emacs-lisp
;; Directories
(setq
 org_notes (concat (getenv "HOME") "/src/org/")
 zot_bib (concat (getenv "HOME") "/src/zotero/zotLib.bib")
 org-directory org_notes
 deft-directory org_notes
 org-roam-directory org_notes
 org-my-anki-file (concat org_notes "anki.org")
 )

;; Defaults
(setq
 org-log-done 'time ; add datetime stamp when a task is done
 org-log-done-with-time t ; add time to datetime
 )
#+end_src


Basic org settings

#+BEGIN_SRC emacs-lisp
(use-package! org
  :defer t
  :hook (org-mode . toc-org-mode)
  :hook (org-mode . +org-pretty-mode)
  ;; :hook (org-mode . writeroom-mode)
  :hook (org-mode . auto-fill-mode)

  :config
  (add-hook! org-mode (hl-line-mode -1))
  (set-company-backend! '(org-mode org-roam-mode)
    'company-capf)

  ;; basic settings
  (setq org-src-window-setup     'plain
        org-export-with-toc      nil
        org-export-with-section-numbers nil
        org-use-sub-superscripts '{}
        org-export-with-sub-superscripts '{}
        org-export-with-entities t
        org-imenu-depth          9
        org-startup-folded       'content)  ;; showeverything ;; t ;; nil

  )
#+END_SRC

*** Org Agenda

#+BEGIN_SRC emacs-lisp
                                        ;(after! org
                                        ;  (setq org-agenda-files (directory-files-recursively org_notes "\\.org$"))
                                        ;  )
#+END_SRC

*** Org Capture

#+BEGIN_SRC emacs-lisp
(after! org-capture
  (setq org-capture-templates
        '(("b" "Basic task for future review" entry
           (file+headline "tasks.org" "Basic tasks that need to be reviewed")
           "* %^{Title}\n:PROPERTIES:\n:CAPTURED: %U\n:END:\n\n%i%l"
           :empty-lines 1)

          ("w" "Work")
          ("wt" "Task or assignment" entry
           (file+headline "work.org" "Tasks and assignments")
           "\n\n* TODO [#A] %^{Title} :@work:\nSCHEDULED: %^t\n:PROPERTIES:\n:CAPTURED: %U\n:END:\n\n%i%?"
           :empty-lines 1)

          ("wm" "Meeting, event, appointment" entry
           (file+headline "work.org" "Meetings, events, and appointments")
           "\n\n* MEET [#A] %^{Title} :@work:\nSCHEDULED: %^T\n:PROPERTIES:\n:CAPTURED: %U\n:END:\n\n%i%?"
           :empty-lines 1)

          ("t" "Task with a due date" entry
           (file+headline "tasks.org" "Task list with a date")
           "\n\n* %^{Scope of task||TODO|STUDY|MEET} %^{Title} %^g\nSCHEDULED: %^t\n:PROPERTIES:\n:CAPTURED: %U\n:END:\n\n%i%?"
           :empty-lines 1)

          ;; anki
          ("a" "Anki basic" entry
           (file+headline org-my-anki-file "Dispatch Shelf")
           "* %<%H:%M>   %^g\n:PROPERTIES:\n:ANKI_NOTE_TYPE: Basic\n:ANKI_DECK: Mega\n:END:\n** Front\n%?\n** Back\n%x\n")

          ("A" "Anki cloze" entry
           (file+headline org-my-anki-file "Dispatch Shelf")
           "* %<%H:%M>   %^g\n:PROPERTIES:\n:ANKI_NOTE_TYPE: Cloze\n:ANKI_DECK: Mega\n:END:\n** Text\n%x\n** Extra\n")

          )
        )
  )
#+END_SRC

*** Org Download - Save images from clipboard

I'll have to redo this another day. My understanding of emacs is not there, yet.

The integration via

#+begin_src emacs-lisp :tangle no
(org
 +download) ;init.el
#+end_src

is pretty nice. :-)

*** Org Buffer

#+begin_src emacs-lisp
(evil-define-command evil-buffer-org-new (count file)
  "Creates a new org buffer replacing the current window, optionally editing a certain FILE"
  :repeat nil
  (interactive "P<f>")
  (if file
      (evil-edit file)
    (let ((buffer (generate-new-buffer "*new org*")))
      (set-window-buffer nil buffer)
      (with-current-buffer buffer
        (org-mode)))))
(map! :leader
      (:prefix "b"
       :desc "New empty ORG buffer" "o" #'evil-buffer-org-new))
#+end_src

*** Org Journal

Use this as a daily driver.

#+BEGIN_SRC emacs-lisp
;; org-journal the DOOM way
(use-package org-journal
  :after org
  :init
  (setq org-journal-file-format "%Y-%m-%d.org"
        org-journal-file-header "#+title: Week %V, %Y\n#+created: %Y-%m-%d\n#+roam_alias:\n#+roam_tags: \"journal\" \"personal\"\n\n[[file:../journal.org][Journal]]\n\n"
        org-journal-date-format "%A, %d %B %Y")
  :config
  (setq org-journal-find-file #'find-file-other-window )
  (map! :map org-journal-mode-map
        "C-c n s" #'evil-save-modified-and-close )
  )

(setq org-journal-enable-agenda-integration t)
#+END_SRC

*** Org Noter

#+begin_src emacs-lisp
(use-package org-noter
  :after (:any org pdf-view)
  :config
  (setq
   ;; The WM can handle splits
   ;;org-noter-notes-window-location 'other-frame
   ;; Please stop opening frames
   org-noter-always-create-frame nil
   ;; I want to see the whole file
   org-noter-hide-other nil
   ;; Everything is relative to the main notes file
   org-noter-notes-search-path (list org_notes)
   )
  )
(setq org-noter-separate-notes-from-heading t)
#+end_src

*** Org Roam

Meanwhile doom integrates =roam= quite nicely.

#+begin_src emacs-lisp
(use-package! org-roam
  :after org
  :commands (org-roam-buffer-toggle-display
             org-roam-find-file
             org-roam-dailies-date
             org-roam-dailies-today
             org-roam-dailies-tomorrow
             org-roam-dailies-yesterday)
  :init
  (setq! org-roam-tag-sort                t
         org-roam-tag-sources             '(prop)
         org-roam-verbose                 t
         org-roam-buffer-width            0.2
         org-roam-graph-max-title-length  40
         org-roam-graph-shorten-titles    'truncate
         org-roam-graph-exclude-matcher   '("old/" "Sunday" "Monday" "Tuesday" "Wednesday" "Thursday" "Friday" "Saturday" "journal")
         org-roam-graph-viewer            (executable-find "open"))
  (remove-hook 'org-roam-buffer-prepare-hook 'org-roam-buffer--insert-ref-links)
  (add-hook! 'org-roam-buffer-prepare-hook #'outline-hide-body)
  (setq org-roam-capture-ref-templates `(("r" "ref" plain #'org-roam-capture--get-point
                                          "%?"
                                          :file-name "${slug}"
                                          :head ,(concat "#+title: ${title}\n"
                                                         "#+roam_key: ${ref}\n"
                                                         "#+roam_tags: article\n"
                                                         "#+setupfile: ./setup.org\n"
                                                         "* Related: \n"
                                                         "  - [[${ref}][url]]\n")
                                          :unnarrowed t))
        org-roam-capture-templates `(("d" "default" plain #'org-roam-capture--get-point
                                      "%?"
                                      :file-name "%<%Y-%m-%d>-${slug}"
                                      :head ,(concat "#+title: ${title}\n"
                                                     "#+roam_tags:\n"
                                                     "#+setupfile: ./setup.org\n"
                                                     "* Description: \n"
                                                     "* Related: \n")
                                      :unnarrowed t))
        org-roam-capture-immediate-template `("d" "default" plain #'org-roam-capture--get-point
                                              "%?"
                                              :file-name "%<%Y-%m-%d>-${slug}"
                                              :head ,(concat "#+title: ${title}\n"
                                                             "#+roam_tags:\n"
                                                             "#+setupfile: ./setup.org\n"
                                                             "* Description: \n"
                                                             "* Related: \n")
                                              :unnarrowed t
                                              :immediate-finish t)
        org-roam-dailies-capture-templates `(("t" "daily" plain #'org-roam-capture--get-point
                                              ""
                                              :immediate-finish t
                                              :file-name "%<%Y-%m-%d-%A>"
                                              :head ,(concat "#+title: %<%A, %B %d, %Y>\n"
                                                             "#+roam_tags: journal\n"
                                                             "* Tasks: \n" ))))
  (map! :map org-mode-map
        "s-TAB" (cmd! (insert "[[roam:]]")
                      (backward-char 2)))
  )
#+end_src

*** Org Roam Server

#+BEGIN_SRC emacs-lisp
(use-package org-roam-server
  :after org-roam
  :config
  (setq org-roam-server-host "127.0.0.1"
        org-roam-server-port 10080
        org-roam-server-authenticate nil
        org-roam-server-export-inline-images t
        org-roam-server-serve-files nil
        org-roam-server-label-truncate t
        org-roam-server-label-truncate-length 60
        org-roam-server-label-wrap-length 20)
  (defun org-roam-server-open ()
    "Ensure the server is active, then open the roam graph."
    (interactive)
                                        ;(org-roam-server-mode 1)
                                        ; https://github.com/org-roam/org-roam-server/issues/75
    (unless (server-running-p)
      (org-roam-server-mode))
    (browse-url-xdg-open (format "http://localhost:%d" org-roam-server-port))))
#+END_SRC


*** Org Anki

There is no =org-anki= per se. But I'd like to implement sth like it based on the lovely intro by https://yiufung.net/post/anki-org/.

#+BEGIN_SRC emacs-lisp
(use-package anki-editor
  :after org
  :bind (:map org-mode-map
                                        ; these are not used by doom
         ("<f5>" . anki-editor-cloze-region-auto-incr)
         ("<f6>" . anki-editor-cloze-region-dont-incr)
         ("<f7>" . anki-editor-reset-cloze-number)
         ("<f8>" . anki-editor-push-tree))
  :hook (org-capture-after-finalize . anki-editor-reset-cloze-number) ; Reset cloze-number after each capture.
  :config
  (setq anki-editor-create-decks t ;; Allow anki-editor to create a new deck if it doesn't exist
        anki-editor-org-tags-as-anki-tags t)

  (defun anki-editor-cloze-region-auto-incr (&optional arg)
    "Cloze region without hint and increase card number."
    (interactive)
    (anki-editor-cloze-region my-anki-editor-cloze-number "")
    (setq my-anki-editor-cloze-number (1+ my-anki-editor-cloze-number))
    (forward-sexp))

  (defun anki-editor-cloze-region-dont-incr (&optional arg)
    "Cloze region without hint using the previous card number."
    (interactive)
    (anki-editor-cloze-region (1- my-anki-editor-cloze-number) "")
    (forward-sexp))

  (defun anki-editor-reset-cloze-number (&optional arg)
    "Reset cloze number to ARG or 1"
    (interactive)
    (setq my-anki-editor-cloze-number (or arg 1)))

  (defun anki-editor-push-tree ()
    "Push all notes under a tree."
    (interactive)
    (anki-editor-push-notes '(4))
    (anki-editor-reset-cloze-number))

  ;; Initialize
  (anki-editor-reset-cloze-number)
  )
#+END_SRC
** Deft

Quickly search through org.

#+BEGIN_SRC emacs-lisp
(use-package deft
  :after org
                                        ;:bind
                                        ;("C-c n d" . deft)
  :init
  (setq deft-default-extension "org"
        ;; de-couples filename and note title:
        deft-use-filename-as-title nil
        deft-use-filter-string-for-filename t
        ;; disable auto-save
        deft-auto-save-interval -1.0
        ;; converts the filter string into a readable file-name using kebab-case:
        deft-file-naming-rules
        '((noslash . "-")
          (nospace . "-")
          (case-fn . downcase)))
  :custom
  (deft-recursive t)
                                        ;(deft-use-filter-string-for-filename t)
                                        ;(deft-default-extension "org")
  )
#+END_SRC

* PACKAGES (=packages.el=) :ATTACH:
:PROPERTIES:
:header-args:emacs-lisp: :tangle "packages.el"
:END:
The following section fills =packages.el=. And this file shouldn't be byte compiled.

#+begin_src emacs-lisp
;; -*- no-byte-compile: t; -*-
#+end_src

** Packages

#+begin_src emacs-lisp
;; ui
(package! beacon) ; global minor mode for a blinking highliter to find where the cursor is.
(package! rotate :pin "091b5ac4fc...") ; window mgmt
(package! xkcd :pin "66e928706f...")
(package! wttrin :recipe (:local-repo "lisp" :no-byte-compile t))
(package! spray :pin "00638bc916...") ; flash words on screen
(package! theme-magic :pin "844c4311bd...") ; terminal theme support
(package! ess-view :pin "d4e5a340b7...") ; data frames all the way down
(package! info-colors :pin "47ee73cc19...") ; makes info pages better
(package! imenu-list)

;; sanity
(package! tldr)
                                        ; TODO: not ready yet: (package! origami) ; fold stuff away

;; org
(package! org-roam-bibtex)
(package! org-roam-server :recipe (:host github :repo "org-roam/org-roam-server" :files ("*")))
(package! org-noter)
(package! org-drill)
(package! anki-editor) ; requires https://github.com/FooSoft/anki-connect#installation - to connect w/ Anki
                                        ;(package! calctex :recipe (:host github :repo "johnbcoughlin/calctex"
                                        ;                           :files ("*.el" "calctex/*.el" "calctex-contrib/*.el" "org-calctex/*.el"))
                                        ; :pin "7fa2673c64...")
(package! org-super-agenda :pin "3264255989...")
(package! org-pomodoro) ; I forget breaks
(package! org-pretty-table-mode
  :recipe (:host github :repo "Fuco1/org-pretty-table") :pin "88380f865a...")
(package! org-fragtog :pin "92119e3ae7...")
(package! org-pretty-tags :pin "40fd72f3e7...")
(package! org-ref :pin "f582e9c53e...") ; citations
(package! org-graph-view :recipe (:host github :repo "alphapapa/org-graph-view") :pin "13314338d7...")
(package! org-chef :pin "5b461ed7d458cdcbff0af5013fbdbe88cbfb13a4") ; url -> orgified version of it
(package! company-org-roam :recipe (:host github :repo "org-roam/company-org-roam"))
(package! graphviz-dot-mode :pin "3642a0a5f41a80c8ecef7c6143d514200b80e194")
(package! ox-gfm :pin "99f93011b0...") ; markdown export with GitHub support

;; themes
(package! leuven-theme) ;; great theme for org
(package! acme-theme) ;; even greater theme

;; everything emacs?
(package! w3m)
#+end_src

* CUSTOMIZE PACKAGES =config.el=
** Company

It's nice to have completions almost all the time, in my opinion. Key strokes
are just waiting to be saved!

#+begin_src emacs-lisp
(after! company
  (setq completion-ignore-case t
        company-idle-delay 0.3
        company-minimum-prefix-length 2)
  (setq company-show-numbers t)
  (add-hook 'evil-normal-state-entry-hook #'company-abort)) ;; make aborting less annoying.
#+end_src

Now, the improvements from ~precedent~ are mostly from remembering history, so
let's improve that memory.

#+begin_src emacs-lisp
(setq-default history-length 1000)
(setq-default prescient-history-length 1000)
#+end_src

** Beacon

#+BEGIN_SRC emacs-lisp
(beacon-mode 1) ; beacon blink everywhere
(map! :leader "c b" #'beacon-blink) ; find the cursor
#+END_SRC

** Plain Text

~Ispell~ is nice, let's have it in ~text~, ~markdown~, and ~GFM~.
*** TODO ispell doesn't work quite right...


#+begin_src emacs-lisp
(set-company-backend!
  '(text-mode
    markdown-mode
    gfm-mode)
  '(:seperate
    company-ispell
    company-files
    company-yasnippet))

(after! ispell
  (setq ispell-program-name (executable-find "hunspell")
        ispell-dictionary "en_US,de_DE")

  (ispell-set-spellchecker-params)
  (ispell-hunspell-add-multi-dic "en_US,de_DE"))
#+end_src


** Info colors

#+begin_src emacs-lisp
(use-package! info-colors
  :commands (info-colors-fontify-node))

(add-hook 'Info-selection-hook 'info-colors-fontify-node)

(add-hook 'Info-mode-hook #'mixed-pitch-mode)
#+end_src

** Modifying doom

#+begin_src emacs-lisp
(setq which-key-idle-delay 0.3) ;; I need the help, I really do
(setq which-key-allow-multiple-replacements t)
(after! which-key
  (pushnew!
   which-key-replacement-alist
   '(("" . "\\`+?evil[-:]?\\(?:a-\\)?\\(.*\\)") . (nil . "‚óÇ\\1"))
   '(("\\`g s" . "\\`evilem--?motion-\\(.*\\)") . (nil . "‚óÉ\\1"))
   ))
#+end_src

Let's connect org-brain with org-noter as described here: https://plasisent.org/2019/lecture-notes-with-emacs-org-brain-noter/

Needed to use org-brain-visualize with org-noter notes:

#+begin_src emacs-lisp
(add-hook 'org-noter-insert-heading-hook #'org-id-get-create)

;; open noter session from visualized org-brain
(defun org-brain-open-org-noter (entry)
    "Open `org-noter' on the ENTRY.
If run interactively, get ENTRY from context."
    (interactive (list (org-brain-entry-at-pt)))
    (org-with-point-at (org-brain-entry-marker entry)
      (org-noter)))
#+end_src
** imenu

#+BEGIN_SRC emacs-lisp
(use-package! imenu-list
  :defer t
  :config
  (set-popup-rules! '(("^\\*Ilist\\*" :side right :size 40 :select t))))
#+END_SRC

* Resources:

- https://tecosaur.github.io/emacs-config/config.html
- https://raw.githubusercontent.com/tecosaur/emacs-config/master/config.org
- https://rgoswami.me/posts/org-note-workflow/
- https://github.com/sunnyhasija/Academic-Doom-Emacs-Config/blob/master/README.org
- https://github.com/OwenPriceSkelly/emacs-config/blob/5fcbaaa1183873f15af8050a49a01180d8677019/config.org
